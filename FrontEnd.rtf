{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import React, \{ useState, useRef \} from 'react';\
import \{ Upload, Leaf, X, AlertCircle, Check, Sprout \} from 'lucide-react';\
\
function App() \{\
  const [image, setImage] = useState<string | null>(null);\
  const [isDragging, setIsDragging] = useState(false);\
  const [prediction, setPrediction] = useState<string | null>(null);\
  const [isLoading, setIsLoading] = useState(false);\
  const [predictions, setPredictions] = useState<any[]>([]);\
  const [labeledImage, setLabeledImage] = useState<string | null>(null);\
  const fileInputRef = useRef<HTMLInputElement>(null);\
\
  const weedControlTips = [\
    "Apply organic mulch to prevent weed growth",\
    "Use targeted herbicides specifically designed for your crop type",\
    "Consider manual removal for small affected areas",\
    "Implement crop rotation to break weed cycles",\
    "Maintain proper spacing between plants to reduce weed competition",\
  ];\
\
  const handleDragOver = (e: React.DragEvent) => \{\
    e.preventDefault();\
    setIsDragging(true);\
  \};\
\
  const handleDragLeave = (e: React.DragEvent) => \{\
    e.preventDefault();\
    setIsDragging(false);\
  \};\
\
  const handleDrop = (e: React.DragEvent) => \{\
    e.preventDefault();\
    setIsDragging(false);\
    const file = e.dataTransfer.files[0];\
    if (file && file.type.startsWith('image/')) \{\
      const reader = new FileReader();\
      reader.onload = () => setImage(reader.result as string);\
      reader.readAsDataURL(file);\
    \}\
  \};\
\
  const handleFileInput = (e: React.ChangeEvent<HTMLInputElement>) => \{\
    const file = e.target.files?.[0];\
    if (file && file.type.startsWith('image/')) \{\
      const reader = new FileReader();\
      reader.onload = () => setImage(reader.result as string);\
      reader.readAsDataURL(file);\
    \}\
  \};\
\
  const checkServerStatus = async () => \{\
    try \{\
      const response = await fetch('http://localhost:5000/');\
      return response.ok;\
    \} catch (error) \{\
      return false;\
    \}\
  \};\
\
  const handleAnalyze = async () => \{\
    if (!image) return;\
    setIsLoading(true);\
    try \{\
      const isServerRunning = await checkServerStatus();\
      if (!isServerRunning) \{\
        throw new Error('Backend server is not running');\
      \}\
\
      const response = await fetch('http://localhost:5000/predict', \{\
        method: 'POST',\
        headers: \{ 'Content-Type': 'application/json' \},\
        body: JSON.stringify(\{ image \}),\
      \});\
\
      const data = await response.json();\
\
      if (data.error) \{\
        throw new Error(data.error);\
      \}\
\
      setPredictions(data.predictions);\
      setLabeledImage(data.labeled_image);\
\
      if (data.predictions.length > 0) \{\
        setPrediction(\
          data.predictions[0].class.toLowerCase() === 'weed' ? 'weed' : 'not-weed'\
        );\
      \} else \{\
        setPrediction('not-weed');\
      \}\
    \} catch (error) \{\
      console.error('Error:', error);\
      alert('Error connecting to server. Please make sure the backend is running.');\
    \} finally \{\
      setIsLoading(false);\
    \}\
  \};\
\
  const resetAll = () => \{\
    setImage(null);\
    setPrediction(null);\
    setPredictions([]);\
    setLabeledImage(null);\
  \};\
\
  const backgroundStyle = \{\
    backgroundImage:\
      prediction === 'weed'\
        ? 'linear-gradient(rgba(255, 0, 0, 0.85), rgba(255, 0, 0, 0.85)), url("https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80")'\
        : 'linear-gradient(rgba(0, 100, 0, 0.3), rgba(0, 100, 0, 0.3)), url("https://images.unsplash.com/photo-1500382017468-9049fed747ef?ixlib=rb-1.2.1&auto=format&fit=crop&w=1950&q=80")',\
    backgroundSize: 'cover',\
    backgroundPosition: 'center',\
    backgroundAttachment: 'fixed',\
    transition: 'all 0.5s ease-in-out',\
  \};\
\
  return (\
    <div style=\{backgroundStyle\} className="min-h-screen flex flex-col items-center justify-start p-4">\
      \{/* Header */\}\
      <div className="flex flex-col items-center mb-8">\
        <Leaf className=\{`w-10 h-10 $\{prediction === 'weed' ? 'text-red-200' : 'text-green-200'\}`\} />\
        <h1 className=\{`text-4xl font-bold $\{prediction === 'weed' ? 'text-white' : 'text-white'\}`\}>\
          Weed Detection AI\
        </h1>\
        <p className=\{`text-lg max-w-2xl mx-auto $\{prediction === 'weed' ? 'text-red-100' : 'text-green-100'\}`\}>\
          Upload an image of a plant and our AI will determine if it's a weed or not.\
          Helping farmers maintain healthier crops through intelligent detection.\
        </p>\
      </div>\
\
      \{/* Main Content */\}\
      <div className="max-w-3xl mx-auto">\
        \{!image ? (\
          <div\
            className=\{`border-4 border-dashed rounded-lg p-8 transition-all duration-300 backdrop-blur-sm $\{\
              isDragging ? 'border-green-500 bg-white/20' : 'border-green-300 hover:border-green-400 bg-white/10'\
            \}`\}\
            onDragOver=\{handleDragOver\}\
            onDragLeave=\{handleDragLeave\}\
            onDrop=\{handleDrop\}\
          >\
            <div className="text-center">\
              <Upload className="w-16 h-16 mx-auto mb-4 text-white" />\
              <h3 className="text-xl font-semibold mb-2 text-white">Drag and drop your image here</h3>\
              <p className="text-white mb-4">or</p>\
              <button\
                onClick=\{() => fileInputRef.current?.click()\}\
                className="bg-green-600 text-white px-6 py-2 rounded-full hover:bg-green-700 transition-colors duration-300"\
              >\
                Browse Files\
              </button>\
              <input\
                type="file"\
                ref=\{fileInputRef\}\
                onChange=\{handleFileInput\}\
                accept="image/*"\
                className="hidden"\
              />\
            </div>\
          </div>\
        ) : (\
          <div className="bg-white/90 backdrop-blur-sm rounded-lg p-6 shadow-lg">\
            <div className="relative">\
              <button\
                onClick=\{resetAll\}\
                className="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors duration-300"\
              >\
                <X className="w-5 h-5" />\
              </button>\
              <img\
                src=\{labeledImage || image\}\
                alt="Uploaded plant"\
                className="w-full h-64 object-cover rounded-lg"\
              />\
            </div>\
\
            \{predictions.length > 0 && (\
              <div className="mt-4">\
                <h4 className="font-semibold text-gray-700 mb-2">Detections:</h4>\
                \{predictions.map((pred, index) => (\
                  <div key=\{index\} className="text-sm text-gray-600">\
                    \{pred.class\}: \{(pred.confidence * 100).toFixed(2)\}% confidence\
                  </div>\
                ))\}\
              </div>\
            )\}\
\
            \{!prediction && !isLoading && (\
              <button\
                onClick=\{handleAnalyze\}\
                className="w-full mt-4 bg-green-600 text-white py-3 rounded-lg hover:bg-green-700 transition-colors duration-300 flex items-center justify-center gap-2"\
              >\
                <Leaf className="w-5 h-5" />\
                Analyze Image\
              </button>\
            )\}\
\
            \{isLoading && (\
              <div className="mt-4 text-center">\
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mx-auto"></div>\
                <p className="mt-2 text-green-700">Analyzing your image...</p>\
              </div>\
            )\}\
\
            \{prediction && (\
              <div className=\{`mt-4 p-4 rounded-lg $\{prediction === 'weed' ? 'bg-red-100' : 'bg-green-100'\}`\}>\
                <div className="flex items-center gap-2 mb-4">\
                  \{prediction === 'weed' ? (\
                    <AlertCircle className="w-6 h-6 text-red-600" />\
                  ) : (\
                    <Check className="w-6 h-6 text-green-600" />\
                  )\}\
                  <p className="text-lg font-semibold">\
                    \{prediction === 'weed'\
                      ? 'Warning: Weed Detected!'\
                      : 'This appears to be a healthy plant!'\}\
                  </p>\
                </div>\
\
                \{prediction === 'weed' && (\
                  <div className="mt-4 space-y-4">\
                    <h4 className="font-semibold text-red-800 flex items-center gap-2">\
                      <Sprout className="w-5 h-5" />\
                      Weed Control Tips\
                    </h4>\
                    <ul className="list-disc pl-5 space-y-2">\
                      \{weedControlTips.map((tip, index) => (\
                        <li key=\{index\} className="text-red-700">\{tip\}</li>\
                      ))\}\
                    </ul>\
                  </div>\
                )\}\
              </div>\
            )\}\
          </div>\
        )\}\
      </div>\
    </div>\
  );\
\}\
\
export default App;\
}